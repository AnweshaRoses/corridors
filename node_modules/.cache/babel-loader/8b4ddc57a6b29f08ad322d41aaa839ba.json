{"ast":null,"code":"var _jsxFileName = \"/Users/rcmishra/Desktop/React/corridors/src/App.js\";\nimport \"./App.css\"; // import React, { useState, useEffect } from \"react\";\n// import PropTypes from \"prop-types\";\n// import List from \"./components/List\";\n// import Alert from \"./components/Alert\";\n// import { UilPlus } from \"@iconscout/react-unicons\";\n// import { UilPen } from \"@iconscout/react-unicons\";\n// import { UilTrashAlt } from \"@iconscout/react-unicons\";\n// import Chart from \"./components/Chart\";\n// import { v4 as uuid } from \"uuid\";\n// import LightTeamA from \"./components/LightTeamA\";\n// // import {Document} from \"./components/Document\"\n\nimport Document from \"./components/Document\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Main from \"./components/Main\"; // const ml5 = window.ml5;\n// let sentiment;\n// const getLocalStorage = () => {\n//   let list = localStorage.getItem(\"list\");\n//   if (list) {\n//     return JSON.parse(localStorage.getItem(\"list\"));\n//   } else {\n//     return [];\n//   }\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  // const unique_id = uuid();\n  // const small_id = unique_id.slice(0, 3);\n  // const [name, setName] = useState(\"\");\n  // const [list, setList] = useState(getLocalStorage());\n  // const [isEditing, setIsEditing] = useState(false);\n  // const [editID, setEditID] = useState(null);\n  // const [alert, setAlert] = useState({ show: false, msg: \"hello\", type: \"successs\" });\n  // let [text, setText] = useState(0);\n  // let [score, setScore] = useState(0);\n  // let [modelIsReady, setModelIsReady] = useState(false);\n  // const handleChange = (e) => {\n  //   setName(e.target.value);\n  //   calculateSentiment();\n  // };\n  // const calculateSentiment = () => {\n  //   const prediction = sentiment.predict(name);\n  //   setScore(prediction.score);\n  // };\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   if (!name) {\n  //     // display alert\n  //   } else if (name && isEditing) {\n  //     setList(\n  //       list.map((item) => {\n  //         if (item.id === editID) {\n  //           return { ...item, title: name };\n  //         }\n  //         return item;\n  //       })\n  //     );\n  //     setName(\"\");\n  //     setIsEditing(false);\n  //     setEditID(null);\n  //   } else {\n  //     // show alert\n  //     const newItem = {\n  //       id: small_id,\n  //       title: name,\n  //       sentifn: Math.floor(score.toFixed(5) * 1000),\n  //     };\n  //     setList([...list, newItem]);\n  //     setName(\"\");\n  //     // setText(\"\");\n  //   }\n  // };\n  // useEffect(() => {\n  //   console.log(\"loading model\");\n  //   sentiment = ml5.sentiment(\"movieReviews\", modelReady);\n  // }, []);\n  // function modelReady() {\n  //   console.log(\"Model Loaded!\");\n  //   setModelIsReady(true);\n  // }\n  // const clearList = () => {\n  //   setList([]);\n  // };\n  // const removeItem = (id) => {\n  //   setList(list.filter((item) => item.id !== id));\n  // };\n  // const editItem = (id) => {\n  //   const specificItem = list.find((item) => item.id === id);\n  //   setIsEditing(true);\n  //   setEditID(id);\n  //   setName(specificItem.title);\n  // };\n  // const [userData, setUserdata] = useState({\n  //   labels: list.map((item) => item.id),\n  //   datasets: [\n  //     {\n  //       label: \"Frequency\",\n  //       data: list.map((item) => item.sentifn),\n  //       borderColor: \"blue\",\n  //       borderWidth: 1.5,\n  //       backgroundColor: \"yellow\",\n  //     },\n  //   ],\n  // });\n  // useEffect(() => {\n  //   localStorage.setItem(\"list\", JSON.stringify(list));\n  // }, [list]);\n  // useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containe\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/document\",\n            element: /*#__PURE__*/_jsxDEV(Document, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 42\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rcmishra/Desktop/React/corridors/src/App.js"],"names":["Document","BrowserRouter","Router","Routes","Route","Main","App","props"],"mappings":";AAAA,OAAO,WAAP,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOA,QAAP,MAAqB,uBAArB;AAIA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,QAKO,kBALP;AAMA,OAAOC,IAAP,MAAiB,mBAAjB,C,CAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA,sBACE;AAAA,2BACA,QAAC,MAAD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACA,QAAC,MAAD;AAAA,kCAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,GAAZ;AAAgB,YAAA,OAAO,eAAE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,WAAZ;AAAwB,YAAA,OAAO,eAAE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAyED;;KA3KQD,G;AA6KT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\n// import React, { useState, useEffect } from \"react\";\n// import PropTypes from \"prop-types\";\n// import List from \"./components/List\";\n// import Alert from \"./components/Alert\";\n// import { UilPlus } from \"@iconscout/react-unicons\";\n// import { UilPen } from \"@iconscout/react-unicons\";\n// import { UilTrashAlt } from \"@iconscout/react-unicons\";\n// import Chart from \"./components/Chart\";\n// import { v4 as uuid } from \"uuid\";\n// import LightTeamA from \"./components/LightTeamA\";\n// // import {Document} from \"./components/Document\"\nimport Document from \"./components/Document\";\n\n\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n\n} from \"react-router-dom\";\nimport Main from \"./components/Main\";\n\n\n\n\n// const ml5 = window.ml5;\n\n// let sentiment;\n\n// const getLocalStorage = () => {\n//   let list = localStorage.getItem(\"list\");\n//   if (list) {\n//     return JSON.parse(localStorage.getItem(\"list\"));\n//   } else {\n//     return [];\n//   }\n// };\n\nfunction App(props) {\n  // const unique_id = uuid();\n  // const small_id = unique_id.slice(0, 3);\n  // const [name, setName] = useState(\"\");\n  // const [list, setList] = useState(getLocalStorage());\n  // const [isEditing, setIsEditing] = useState(false);\n  // const [editID, setEditID] = useState(null);\n  // const [alert, setAlert] = useState({ show: false, msg: \"hello\", type: \"successs\" });\n  // let [text, setText] = useState(0);\n  // let [score, setScore] = useState(0);\n  // let [modelIsReady, setModelIsReady] = useState(false);\n\n\n  // const handleChange = (e) => {\n  //   setName(e.target.value);\n  //   calculateSentiment();\n  // };\n\n  // const calculateSentiment = () => {\n  //   const prediction = sentiment.predict(name);\n  //   setScore(prediction.score);\n  // };\n\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n\n  //   if (!name) {\n  //     // display alert\n  //   } else if (name && isEditing) {\n  //     setList(\n  //       list.map((item) => {\n  //         if (item.id === editID) {\n  //           return { ...item, title: name };\n  //         }\n  //         return item;\n  //       })\n  //     );\n  //     setName(\"\");\n  //     setIsEditing(false);\n  //     setEditID(null);\n  //   } else {\n  //     // show alert\n  //     const newItem = {\n  //       id: small_id,\n  //       title: name,\n  //       sentifn: Math.floor(score.toFixed(5) * 1000),\n  //     };\n\n  //     setList([...list, newItem]);\n  //     setName(\"\");\n  //     // setText(\"\");\n  //   }\n  // };\n  // useEffect(() => {\n  //   console.log(\"loading model\");\n  //   sentiment = ml5.sentiment(\"movieReviews\", modelReady);\n  // }, []);\n\n  // function modelReady() {\n  //   console.log(\"Model Loaded!\");\n  //   setModelIsReady(true);\n  // }\n\n  // const clearList = () => {\n  //   setList([]);\n  // };\n  // const removeItem = (id) => {\n  //   setList(list.filter((item) => item.id !== id));\n  // };\n\n  // const editItem = (id) => {\n  //   const specificItem = list.find((item) => item.id === id);\n  //   setIsEditing(true);\n  //   setEditID(id);\n  //   setName(specificItem.title);\n  // };\n  // const [userData, setUserdata] = useState({\n  //   labels: list.map((item) => item.id),\n  //   datasets: [\n  //     {\n  //       label: \"Frequency\",\n  //       data: list.map((item) => item.sentifn),\n  //       borderColor: \"blue\",\n  //       borderWidth: 1.5,\n  //       backgroundColor: \"yellow\",\n  //     },\n  //   ],\n  // });\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"list\", JSON.stringify(list));\n  // }, [list]);\n\n  // useEffect(() => {}, []);\n\n\n\n\n  return (\n    <>\n    <Router >\n      <div className=\"containe\">\n      <Routes>\n        \n        <Route path=\"/\" element={<Main/>}/ >\n        <Route path=\"/document\" element={<Document/>}/ >\n      </Routes>\n      </div>\n    </Router>\n\n    {/* <div>\n      <section className=\"text-gray-600 body-font relative\">\n        <div className=\"container px-5 py-8 mx-auto\">\n          <div className=\"flex flex-col text-center w-full mb-12\">\n            <h1 className=\"sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900\">\n              Chart Generator\n            </h1>\n            <p className=\"lg:w-2/3 mx-auto leading-relaxed text-base\">\n              This project aims to analyze the text generates a score based on the given data\n              <br />\n            </p>\n          </div>\n          <form onSubmit={handleSubmit}>\n            {alert.show && <Alert {...alert} />}\n            <div className=\"lg:w-1/2 md:w-2/3 mx-auto\">\n              <div className=\"flex flex-wrap -m-2\">\n                <div className=\"p-2 w-full\">\n                  <div className=\"relative\">\n                    <label htmlFor=\"message\" className=\"leading-7 text-sm text-gray-600\">\n                      Enter the data\n                    </label>\n                    <textarea\n                      id=\"message\"\n                      name=\"message\"\n                      value={name}\n                      onChange={handleChange}\n                      className={`w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-${props.theme}-500 focus:bg-white focus:ring-2 focus:ring-${props.theme}-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out`}\n                    ></textarea>\n                  </div>\n                </div>\n                <div className=\"p-2 w-full\">\n                  <button\n                    type=\"submit\"\n                    class=\"text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2\"\n                  >\n                    {isEditing ? \"Edit\" : \"Submit\"}\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={clearList}\n                    class=\"text-red-700 hover:text-white border border-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-900\"\n                  >\n                    Clear List\n                  </button>\n\n\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n      <List items={list} remove={removeItem} edit={editItem} />\n      <div style={{ width: 700, textAlign: \"center\", margin: \"auto\" }}>\n        <p>Refresh the page to view updated chart. This bug is yet to be fixed</p>\n        <Chart chartData={userData} />\n      </div>\n      {/* <LightTeamA /> */}\n    {/* </div> */} \n    </>\n  );\n}\n\nexport default App;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}